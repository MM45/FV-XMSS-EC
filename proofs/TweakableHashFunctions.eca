(**************************************************************************)
(* File containing everything related to tweakable hash functions.        *)
(* This file is based on the material from several papers.                *) 
(* More precisely, this concerns the following references:                *)
(* - "The SPHINCS+ Signature Framework."                                  *)
(*   DOI: 10.1145/3319535.3363229                                         *)
(* - "Recovering the Tight Security Proof of SPHINCS+"                    *)
(*   DOI: 10.1007/978-3-031-22972-5_1                                     *)
(**************************************************************************)

(* --- Require/Import Theories --- *)
(* -- Built-in (i.e, standard library) -- *)
require import AllCore List Distr.



(* --- General --- *)
(* -- Types -- *)
(* Type for public parameters/context information *)
type pp_t.

(* Type for tweaks *)
type tw_t.

(* Type for inputs ('messages') *) 
type in_t.

(* Type for outputs ('message digests') *)
type out_t.

(* 
  Type for differentiating characteristic of input types; used when considering 
  collections of tweakable hash functions.
  An example of a differentiating characteristic is (message) length, in which case this
  type should be instantiated as int.
*)
type diff.


(* -- Operators -- *)
(* - Auxiliary - *)
(* Predicate that returns true iff the given lists do not share any elements *)
op disj_lists (s1 s2 : 'a list) : bool = ! has (mem s2) s1.

(* - Regular - *)
(* Computes differentiating characteristic of an input value *)
op get_diff : in_t -> diff.

(* Tweakable hash function *)
op f : pp_t -> tw_t -> in_t -> out_t.

(* Tweakable hash function collection *)
op fc : diff -> pp_t -> tw_t -> in_t -> out_t.

(* Tweakable hash function f is a member of the tweakable hash function collection fc  *)
axiom in_collection : exists (df : diff), fc df = f.


(* -- Distributions -- *)
(* 
  (Proper) Distributions over the public parameter type, tweak type, input type, and 
  output type, respectively 
*)
op [lossless] dpp : pp_t distr.
op [lossless] dtw : tw_t distr.
op [lossless] din : in_t distr.
op [lossless] dout : out_t distr.



(* --- Properties --- *)
(* -- General -- *)
(* Module type for oracle for properties of collection of tweakable hash functions *)
module type Oracle_THFC = {
  proc init(pp_init : pp_t) : unit
  proc get_tweaks() : tw_t list
  proc query(tw : tw_t, x : in_t) : out_t
}.

(* Default implementation of oracle for properties of collection of tweakable hash functions *)
module O_THFC_Default : Oracle_THFC = {
  var pp : pp_t
  var tws : tw_t list
  
  proc init(pp_init : pp_t) : unit = {
    pp <- pp_init;
    tws <- [];
  }
  
  proc query(tw : tw_t, x : in_t) : out_t = {
    var df : diff;
    var y : out_t;
    
    df <- get_diff x;
    y <- fc df pp tw x;
    
    tws <- rcons tws tw;
    
    return y; 
  }

  proc get_tweaks() : tw_t list = {
    return tws;
  }  
}.

(* Module type for oracle for weak properties of collection of tweakable hash functions *)
module type Oracle_WTHFC = {
  proc init(gc_init : diff -> pp_t -> tw_t -> in_t -> out_t, pp_init : pp_t) : unit
  proc query(tw : tw_t, x : in_t) : out_t
  proc get_tweaks() : tw_t list
}.

(* Default implementation of oracle for weak properties of collections of tweakable hash functions *)
module O_WTHFC_Default : Oracle_WTHFC = {
  var gc : diff -> pp_t -> tw_t -> in_t -> out_t
  var pp : pp_t
  var tws : tw_t list
  
  proc init(gc_init : diff -> pp_t -> tw_t -> in_t -> out_t, pp_init : pp_t) : unit = {
    gc <- gc_init;
    pp <- pp_init;
    tws <- [];
  }
  
  proc query(tw : tw_t, x : in_t) : out_t = {
    var df : diff;
    var y : out_t;
    
    df <- get_diff x;
    y <- gc df pp tw x;
    
    tws <- rcons tws tw;
    
    return y; 
  }

  proc get_tweaks() : tw_t list = {
    return tws;
  }
}.


(* 
-- 
  PREimage resistance (PRE) / One-Wayness (OW).
-- 
*)
(* - General - *)
(* Number of functions/targets for the multi-function/multi-target variants of PRE *)
const t_pre : { int | 0 <= t_pre } as ge0_tpre.


(* - Single-function, Multi-target, Distinct-Tweak PREimage resistance (SM_DT_PRE) - *)
module type Oracle_SMDTPRE = {
  proc init(pp_init : pp_t) : unit
  proc query(tw : tw_t) : out_t
  proc get(i : int) : tw_t * out_t
  proc get_tweaks() : tw_t list
  proc nr_targets() : int
  proc dist_tweaks() : bool
}.

module type Adv_SMDTPRE(O : Oracle_SMDTPRE) = {
  proc pick() : unit { O.query }
  proc find(pp : pp_t) : int * in_t {}
}.


module O_SMDTPRE_Default : Oracle_SMDTPRE = {
  var pp : pp_t
  var ts : (tw_t * out_t) list
  
  proc init(pp_init : pp_t) : unit = {
    pp <- pp_init;
    ts <- [];
  }
  
  proc query(tw : tw_t) : out_t = {
    var x : in_t;
    var y : out_t;
    var twy : tw_t * out_t;
    
    x <$ din;
    y <- f pp tw x;
    
    twy <- (tw, y);
    ts <- rcons ts twy;
    
    return y;
  }
  
  proc get(i : int) : tw_t * out_t = {
    return nth witness ts i;
  }
  
  proc get_tweaks() : tw_t list = {
    return unzip1 ts;
  }
  
  proc nr_targets() : int = {
    return size ts;
  }
  
  proc dist_tweaks() : bool = {
    return uniq (unzip1 ts);
  }
}.

module SM_DT_PRE(A : Adv_SMDTPRE, O : Oracle_SMDTPRE) = {
  module A = A(O)
  
  proc main() : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var y : out_t;
    var i : int;
    var nrts : int;
    var dist : bool;
    
    pp <$ dpp;
    O.init(pp);
    
    A.pick();
    (i, x) <@ A.find(pp);

    (tw, y) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    return 0 <= nrts <= t_pre /\ dist /\ f pp tw x = y;  
  }
}.


(* - Weak, Single-function, Multi-target, Distinct-Tweak PREimage resistance (W_SM_DT_PRE) - *)
module type Oracle_WSMDTPRE = {
  proc init(g_init : pp_t -> tw_t -> in_t -> out_t, pp_init : pp_t) : unit
  proc query(tw : tw_t) : out_t
  proc get(i : int) : tw_t * out_t
  proc get_tweaks() : tw_t list
  proc nr_targets() : int
  proc dist_tweaks() : bool
}.

module type Adv_WSMDTPRE(O : Oracle_WSMDTPRE) = {
  proc pick() : unit { O.query }
  proc find(g : pp_t -> tw_t -> in_t -> out_t, pp : pp_t) : int * in_t {}
}.


module O_WSMDTPRE_Default : Oracle_WSMDTPRE = {
  var g : pp_t -> tw_t -> in_t -> out_t
  var pp : pp_t
  var ts : (tw_t * out_t) list
  
  proc init(g_init : pp_t -> tw_t -> in_t -> out_t, pp_init : pp_t) : unit = {
    g <- g_init;
    pp <- pp_init;
    ts <- [];
  }
  
  proc query(tw : tw_t) : out_t = {
    var x : in_t;
    var y : out_t;
    var twy : tw_t * out_t;
    
    x <$ din;
    y <- g pp tw x;
    
    twy <- (tw, y);
    ts <- rcons ts twy; 
    
    return y;
  }
  
  proc get(i : int) : tw_t * out_t = {
    return nth witness ts i;
  }
  
  proc get_tweaks() : tw_t list = {
    return unzip1 ts;
  }
  
  proc nr_targets() : int = {
    return size ts;
  }
  
  proc dist_tweaks() : bool = {
    return uniq (unzip1 ts);
  }
}.

module W_SM_DT_PRE(A : Adv_WSMDTPRE, O : Oracle_WSMDTPRE) = {
  module A = A(O)
  
  proc main(g : pp_t -> tw_t -> in_t -> out_t) : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var y : out_t;
    var i : int;
    var nrts : int;
    var dist : bool;
    
    pp <$ dpp;
    O.init(g, pp);
    
    A.pick();
    (i, x) <@ A.find(g, pp);

    (tw, y) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    return 0 <= nrts <= t_pre /\ dist /\ g pp tw x = y;  
  }
}.


(* 
  - 
  Single-function, Multi-target, Distinct-Tweak PREimage resistance for members
  of a Collection (SM_DT_PRE_C) 
  - 
*)
module type Adv_SMDTPREC(O : Oracle_SMDTPRE, OC : Oracle_THFC) = {
  proc pick() : unit { O.query, OC.query }
  proc find(pp : pp_t) : int * in_t {}
}.

module SM_DT_PRE_C(A : Adv_SMDTPREC, O : Oracle_SMDTPRE, OC : Oracle_THFC) = {
  module A = A(O, OC)
  
  proc main() : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var y : out_t;
    var i : int;
    var nrts : int;
    var dist : bool;
    var twsO, twsOC : tw_t list;
    
    pp <$ dpp;
    OC.init(pp);
    O.init(pp);
    
    A.pick();
    (i, x) <@ A.find(pp);

    (tw, y) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    twsO <@ O.get_tweaks();
    twsOC <@ OC.get_tweaks();
     
    return 0 <= nrts <= t_pre /\ dist /\ f pp tw x = y /\ disj_lists twsO twsOC;  
  }
}.


(* 
  - 
  Weak, Single-function, Multi-target, Distinct-Tweak PREimage resistance for members
  of a Collection (W_SM_DT_PRE_C) 
  - 
*)
module type Adv_WSMDTPREC(O : Oracle_WSMDTPRE, OC : Oracle_WTHFC) = {
  proc pick() : unit { O.query, OC.query }
  proc find(g : diff -> pp_t -> tw_t -> in_t -> out_t, df : diff, pp : pp_t) : int * in_t {}
}.

module W_SM_DT_PRE_C(A : Adv_WSMDTPREC, O : Oracle_WSMDTPRE, OC : Oracle_WTHFC) = {
  module A = A(O, OC)
  
  proc main(gc : diff -> pp_t -> tw_t -> in_t -> out_t, df : diff) : bool = {
    var g : pp_t -> tw_t -> in_t -> out_t;
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var y : out_t;
    var i : int;
    var nrts : int;
    var dist : bool;
    var twsO, twsOC : tw_t list;
    
    pp <$ dpp;
    
    OC.init(gc, pp);
    
    g <- gc df;
    O.init(g, pp);
    
    A.pick();
    (i, x) <@ A.find(gc, df, pp);

    (tw, y) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    twsO <@ O.get_tweaks();
    twsOC <@ OC.get_tweaks();
     
    return 0 <= nrts <= t_pre /\ dist /\ g pp tw x = y /\ disj_lists twsO twsOC;  
  }
}.


(* 
-- 
  Collision Resistance (CR).
-- 
*)
(* - General - *)
(* Number of functions/targets for the multi-function/multi-target variants of CR *)
const t_cr : { int | 0 <= t_cr } as ge0_tcr. 


(* - Single-function, Multi-target, Distinct-Tweak Target Collision Resistance (SM_DT_TCR) - *)
module type Oracle_SMDTTCR = {
  proc init(pp_init : pp_t) : unit
  proc query(tw : tw_t, x : in_t) : out_t
  proc get(i : int) : tw_t * in_t
  proc get_tweaks() : tw_t list
  proc nr_targets() : int
  proc dist_tweaks() : bool
}.

module type Adv_SMDTTCR(O : Oracle_SMDTTCR) = {
  proc pick() : unit { O.query }
  proc find(pp : pp_t) : int * in_t {}
}.


module O_SMDTTCR_Default : Oracle_SMDTTCR = {
  var pp : pp_t
  var ts : (tw_t * in_t) list
  
  proc init(pp_init : pp_t) : unit = {
    pp <- pp_init;
    ts <- [];
  }
  
  proc query(tw : tw_t, x : in_t) : out_t = {
    var y : out_t;
    var twx : tw_t * in_t;
    
    y <- f pp tw x;
    
    twx <- (tw, x);
    ts <- rcons ts twx;
    
    return y; 
  }
  
  proc get(i : int) : tw_t * in_t = {
    return nth witness ts i;
  }

  proc get_tweaks() : tw_t list = {
    return unzip1 ts;
  }
  
  proc nr_targets() : int = {
    return size ts;
  }
  
  proc dist_tweaks() : bool = {
    return uniq (unzip1 ts);
  }
}.

module SM_DT_TCR(A : Adv_SMDTTCR, O : Oracle_SMDTTCR) = {
  module A = A(O)
  
  proc main() : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x, x' : in_t;
    var i : int;
    var nrts : int;
    var dist : bool;
    
    pp <$ dpp;
    O.init(pp);
    
    A.pick();
    (i, x') <@ A.find(pp);

    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    return 0 <= nrts <= t_cr /\ dist /\ x <> x' /\ f pp tw x = f pp tw x';  
  }
}.


(* - Weak, Single-function, Multi-target, Distinct-Tweak Target Collision Resistance (W_SM_DT_TCR) - *)
module type Oracle_WSMDTTCR = {
  proc init(g_init : pp_t -> tw_t -> in_t -> out_t, pp_init : pp_t) : unit
  proc query(tw : tw_t, x : in_t) : out_t
  proc get(i : int) : tw_t * in_t
  proc get_tweaks() : tw_t list
  proc nr_targets() : int
  proc dist_tweaks() : bool
}.

module type Adv_WSMDTTCR(O : Oracle_WSMDTTCR) = {
  proc pick() : unit { O.query }
  proc find(g : pp_t -> tw_t -> in_t -> out_t, pp : pp_t) : int * in_t {}
}.


module O_WSMDTTCR_Default : Oracle_WSMDTTCR = {
  var g : pp_t -> tw_t -> in_t -> out_t
  var pp : pp_t
  var ts : (tw_t * in_t) list
  
  proc init(g_init : pp_t -> tw_t -> in_t -> out_t, pp_init : pp_t) : unit = {
    g <- g_init;
    pp <- pp_init;
    ts <- [];
  }
  
  proc query(tw : tw_t, x : in_t) : out_t = {
    var y : out_t;
    var twx : tw_t * in_t;
    
    y <- g pp tw x;
    
    twx <- (tw, x);
    ts <- rcons ts twx; 
  
    return y;
  }
  
  proc get(i : int) : tw_t * in_t = {
    return nth witness ts i;
  }

  proc get_tweaks() : tw_t list = {
    return unzip1 ts;
  }
  
  proc nr_targets() : int = {
    return size ts;
  }
  
  proc dist_tweaks() : bool = {
    return uniq (unzip1 ts);
  }
}.

module W_SM_DT_TCR(A : Adv_WSMDTTCR, O : Oracle_WSMDTTCR) = {
  module A = A(O)
  
  proc main(g : pp_t -> tw_t -> in_t -> out_t) : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x, x' : in_t;
    var i : int;
    var nrts : int;
    var dist : bool;
    
    pp <$ dpp;
    O.init(g, pp);
    
    A.pick();
    (i, x') <@ A.find(g, pp);

    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    return 0 <= nrts <= t_cr /\ dist /\ x <> x' /\ g pp tw x = g pp tw x';
  }
}.


(* 
  - 
  Single-function, Multi-target, Distinct-Tweak Target Collision Resistance for members
  of a Collection (SM_DT_TCR_C) 
  - 
*)
module type Adv_SMDTTCRC(O : Oracle_SMDTTCR, OC : Oracle_THFC) = {
  proc pick() : unit { O.query, OC.query }
  proc find(pp : pp_t) : int * in_t {}
}.

module SM_DT_TCR_C(A : Adv_SMDTTCRC, O : Oracle_SMDTTCR, OC : Oracle_THFC) = {
  module A = A(O, OC)
  
  proc main() : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x, x' : in_t;
    var y : out_t;
    var i : int;
    var nrts : int;
    var dist : bool;
    var twsO, twsOC : tw_t list;
    
    pp <$ dpp;    
    OC.init(pp);
    O.init(pp);
    
    A.pick();
    (i, x') <@ A.find(pp);

    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    twsO <@ O.get_tweaks();
    twsOC <@ OC.get_tweaks();
     
    return 0 <= nrts <= t_cr /\ dist /\ x <> x' /\ f pp tw x = f pp tw x' /\ disj_lists twsO twsOC;  
  }
}.


(* 
  - 
  Weak, Single-function, Multi-target, Distinct-Tweak Target Collision Resistance for members
  of a Collection (W_SM_DT_TCR_C) 
  - 
*)
module type Adv_WSMDTTCRC(O : Oracle_WSMDTTCR, OC : Oracle_WTHFC) = {
  proc pick() : unit { O.query, OC.query }
  proc find(gc : diff -> pp_t -> tw_t -> in_t -> out_t, df : diff, pp : pp_t) : int * in_t {}
}.

module W_SM_DT_TCR_C(A : Adv_WSMDTTCRC, O : Oracle_WSMDTTCR, OC : Oracle_WTHFC) = {
  module A = A(O, OC)
  
  proc main(gc : diff -> pp_t -> tw_t -> in_t -> out_t, df : diff) : bool = {
    var g : pp_t -> tw_t -> in_t -> out_t;
    var pp : pp_t;
    var tw : tw_t;
    var x, x' : in_t;
    var y : out_t;
    var i : int;
    var nrts : int;
    var dist : bool;
    var twsO, twsOC : tw_t list;
    
    pp <$ dpp;
    
    OC.init(gc, pp);
    
    g <- gc df;
    O.init(g, pp);
    
    A.pick();
    (i, x') <@ A.find(gc, df, pp);

    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    twsO <@ O.get_tweaks();
    twsOC <@ OC.get_tweaks();
     
    return 0 <= nrts <= t_cr /\ dist /\ x <> x'/\ g pp tw x = g pp tw x' /\ disj_lists twsO twsOC;  
  }
}.
 

(* 
-- 
  Decisional Second Preimage Resistance (DSPR).
--
*)
(* - General - *)
(* Number of functions/targets for the multi-function/multi-target variants of DSPR *)
const t_dspr : { int | 0 <= t_dspr } as ge0_tdspr.

(* Predicate that checks whether there exists a second preimage for a given x under g pp tw *)
op spexists (g : pp_t -> tw_t -> in_t -> out_t) (pp : pp_t) (tw : tw_t) (x : in_t) = 
  exists (x' : in_t), x <> x' /\ g pp tw x = g pp tw x'.


(* - Single-function, Multi-target, Distinct-Tweak Decisional Second Preimage Resistance (SM_DT_DSPR) - *)
module type Oracle_SMDTDSPR = {
  include Oracle_SMDTTCR
}.

module type Adv_SMDTDSPR(O : Oracle_SMDTDSPR) = {
  proc pick() : unit { O.query }
  proc guess(pp : pp_t) : int * bool {}
}.


module O_SMDTDSPR_Default : Oracle_SMDTDSPR = {
  var pp : pp_t
  var ts : (tw_t * in_t) list
  
  proc init(pp_init : pp_t) : unit = {
    pp <- pp_init;
    ts <- [];
  }
  
  proc query(tw : tw_t, x : in_t) : out_t = {
    var y : out_t;
    var twx : tw_t * in_t;
    
    y <- f pp tw x;
    
    twx <- (tw, x);
    ts <- rcons ts twx;
    
    return y;
  }
  
  proc get(i : int) : tw_t * in_t = {
    return nth witness ts i;
  }
  
  proc get_tweaks() : tw_t list = {
    return unzip1 ts; 
  }
  
  proc nr_targets() : int = {
    return size ts;
  }
  
  proc dist_tweaks() : bool = {
    return uniq (unzip1 ts);
  }
}.

module SM_DT_SPprob(A : Adv_SMDTDSPR, O : Oracle_SMDTDSPR) = {
  module A = A(O)
  
  proc main() : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var i : int;
    var b : bool;
    var nrts : int;
    var dist : bool;
    
    pp <$ dpp;
    O.init(pp);
    
    A.pick();
    (i, b) <@ A.guess(pp);
    
    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    return 0 <= nrts <= t_dspr /\ dist /\ spexists f pp tw x;
  }
}.

module SM_DT_DSPR(A : Adv_SMDTDSPR, O : Oracle_SMDTDSPR) = {
  module A = A(O)
  
  proc main() : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var twx : tw_t * in_t;
    var i : int;
    var b : bool;
    var nrts : int;
    var dist : bool;
    
    pp <$ dpp;
    O.init(pp);
    
    A.pick();
    (i, b) <@ A.guess(pp);
    
    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    return 0 <= nrts <= t_dspr /\ dist /\ spexists f pp tw x = b;
  }
}.


(* - Weak, Single-function, Multi-target, Distinct-Tweak Decisional Second Preimage Resistance (W_SM_DT_DSPR) - *)
module type Oracle_WSMDTDSPR = {
  include Oracle_WSMDTTCR
}.

module type Adv_WSMDTDSPR(O : Oracle_WSMDTDSPR) = {
  proc pick() : unit { O.query }
  proc guess(g : pp_t -> tw_t -> in_t -> out_t, pp : pp_t) : int * bool {}
}.

module O_WSMDTDSPR_Default : Oracle_WSMDTDSPR = {
  var g : pp_t -> tw_t -> in_t -> out_t
  var pp : pp_t
  var ts : (tw_t * in_t) list
  
  proc init(g_init : pp_t -> tw_t -> in_t -> out_t, pp_init : pp_t) : unit = {
    g <- g_init;
    pp <- pp_init;
    ts <- [];
  }
  
  proc query(tw : tw_t, x : in_t) : out_t = {
    var y : out_t;
    var twx : tw_t * in_t;
    
    y <- g pp tw x;
    
    twx <- (tw, x);
    ts <- rcons ts twx;
    
    return y; 
  }
  
  proc get(i : int) : tw_t * in_t = {
    return nth witness ts i;
  }
  
  proc get_tweaks() : tw_t list = {
    return unzip1 ts;
  }
  
  proc nr_targets() : int = {
    return size ts;
  }
  
  proc dist_tweaks() : bool = {
    return uniq (unzip1 ts);
  }
}.

module W_SM_DT_SPprob(A : Adv_WSMDTDSPR, O : Oracle_WSMDTDSPR) = {
  module A = A(O)
  
  proc main(g : pp_t -> tw_t -> in_t -> out_t) : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var i : int;
    var b : bool;
    var nrts : int;
    var dist : bool;
    
    pp <$ dpp;
    O.init(g , pp);
    
    A.pick();
    (i, b) <@ A.guess(g, pp);
    
    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    return 0 <= nrts <= t_dspr /\ dist /\ spexists g pp tw x;
  }
}.

module W_SM_DT_DSPR(A : Adv_WSMDTDSPR, O : Oracle_WSMDTDSPR) = {
  module A = A(O)
  
  proc main(g : pp_t -> tw_t -> in_t -> out_t) : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var twx : tw_t * in_t;
    var i : int;
    var b : bool;
    var nrts : int;
    var dist : bool;
    
    pp <$ dpp;
    O.init(g, pp);
    
    A.pick();
    (i, b) <@ A.guess(g, pp);
    
    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    return 0 <= nrts <= t_dspr /\ dist /\ spexists g pp tw x = b;
  }
}.


(* 
  - 
  Single-function, Multi-target, Distinct-Tweak Decisional Second Preimage Resistance for
  members of a Collection (SM_DT_DSPR_C) 
  - 
*)
module type Adv_SMDTDSPRC(O : Oracle_SMDTDSPR, OC : Oracle_THFC) = {
  proc pick() : unit { O.query, OC.query }
  proc guess(pp : pp_t) : int * bool {}
}.

module SM_DT_SPprob_C(A : Adv_SMDTDSPRC, O : Oracle_SMDTDSPR, OC : Oracle_THFC) = {
  module A = A(O, OC)
  
  proc main() : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var i : int;
    var b : bool;
    var nrts : int;
    var dist : bool;
    var twsO, twsOC : tw_t list;
    
    pp <$ dpp;
    OC.init(pp);
    O.init(pp);
    
    A.pick();
    (i, b) <@ A.guess(pp);
    
    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    twsO <@ O.get_tweaks();
    twsOC <@ OC.get_tweaks();
    
    return 0 <= nrts <= t_dspr /\ dist /\ spexists f pp tw x /\ disj_lists twsO twsOC;
  }
}.

module SM_DT_DSPR_C(A : Adv_SMDTDSPRC, O : Oracle_SMDTDSPR, OC : Oracle_THFC) = {
  module A = A(O, OC)
  
  proc main() : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var i : int;
    var b : bool;
    var nrts : int;
    var dist : bool;
    var twsO, twsOC : tw_t list;
    
    pp <$ dpp;
    OC.init(pp);
    O.init(pp);
    
    A.pick();
    (i, b) <@ A.guess(pp);
    
    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    twsO <@ O.get_tweaks();
    twsOC <@ OC.get_tweaks();
    
    return 0 <= nrts <= t_dspr /\ dist /\ spexists f pp tw x = b /\ disj_lists twsO twsOC;
  }
}.


(* 
  - 
  Weak, Single-function, Multi-target, Distinct-Tweak Decisional Second Preimage Resistance for
  members of a Collection (W_SM_DT_DSPR_C) 
  - 
*)
module type Adv_WSMDTDSPRC(O : Oracle_WSMDTDSPR, OC : Oracle_WTHFC) = {
  proc pick() : unit { O.query, OC.query }
  proc guess(gc : diff -> pp_t -> tw_t -> in_t -> out_t, df : diff, pp : pp_t) : int * bool {}
}.

module W_SM_DT_SPprob_C(A : Adv_WSMDTDSPRC, O : Oracle_WSMDTDSPR, OC : Oracle_WTHFC) = {
  module A = A(O, OC)
  
  proc main(gc : diff -> pp_t -> tw_t -> in_t -> out_t, df : diff) : bool = {
    var g : pp_t -> tw_t -> in_t -> out_t;
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var i : int;
    var b : bool;
    var nrts : int;
    var dist : bool;
    var twsO, twsOC : tw_t list;
    
    pp <$ dpp;
    
    OC.init(gc, pp);
    
    g <- gc df;
    O.init(g, pp);
    
    A.pick();
    (i, b) <@ A.guess(gc, df, pp);
    
    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    twsO <@ O.get_tweaks();
    twsOC <@ OC.get_tweaks();
    
    return 0 <= nrts <= t_dspr /\ dist /\ spexists g pp tw x /\ disj_lists twsO twsOC;
  }
}.

module W_SM_DT_DSPR_C(A : Adv_WSMDTDSPRC, O : Oracle_WSMDTDSPR, OC : Oracle_WTHFC) = {
  module A = A(O, OC)
  
  proc main(gc : diff -> pp_t -> tw_t -> in_t -> out_t, df : diff) : bool = {
    var g : pp_t -> tw_t -> in_t -> out_t;
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var i : int;
    var b : bool;
    var nrts : int;
    var dist : bool;
    var twsO, twsOC : tw_t list;
    
    pp <$ dpp;
    
    OC.init(gc, pp);
    
    g <- gc df;
    O.init(g, pp);
    
    A.pick();
    (i, b) <@ A.guess(gc, df, pp);
    
    (tw, x) <@ O.get(i);
    
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    twsO <@ O.get_tweaks();
    twsOC <@ OC.get_tweaks();
    
    return 0 <= nrts <= t_dspr /\ dist /\ spexists g pp tw x = b /\ disj_lists twsO twsOC;
  }
}.


(* 
-- 
  UnDetectability (UD).
-- 
*)
(* - General - *)
(* Number of functions/targets for the multi-function/multi-target variants of UD *)
const t_ud : { int | 0 <= t_ud } as ge0_tud.


(* - Single-function, Multi-target, Distinct-Tweak UnDetectability (SM_DT_UD) - *)
module type Oracle_SMDTUD = {
  proc init(b_init : bool, pp_init : pp_t) : unit
  proc query(tw : tw_t) : out_t
  proc get_tweaks() : tw_t list
  proc nr_targets() : int
  proc dist_tweaks() : bool
}.

module type Adv_SMDTUD(O : Oracle_SMDTUD) = {
  proc pick() : unit { O.query }
  proc distinguish(pp : pp_t) : bool {}
}.

module O_SMDTUD_Default : Oracle_SMDTUD = {
  var b : bool
  var pp : pp_t
  var ts : tw_t list
  
  proc init(b_init : bool, pp_init : pp_t) : unit = {
    b <- b_init;
    pp <- pp_init;
    ts <- [];
  }
  
  proc query(tw : tw_t) : out_t = {
    var x : in_t;
    var y : out_t;
    
    if (b) {
      y <$ dout;
    } else {
      x <$ din;
      y <- f pp tw x;
    }
    
    ts <- rcons ts tw;
    
    return y; 
  }

  proc get_tweaks() : tw_t list = {
    return ts;
  }
    
  proc nr_targets() : int = {
    return size ts;
  }
  
  proc dist_tweaks() : bool = {
    return uniq ts;
  }
}.

module SM_DT_UD(A : Adv_SMDTUD, O : Oracle_SMDTUD) = {
  module A = A(O)
  
  proc main(b : bool) : bool = {
    var pp : pp_t;
    var b' : bool;
    var nrts : int;
    var dist : bool;
    
    pp <$ dpp;
    O.init(b, pp);
    
    A.pick();
    b' <@ A.distinguish(pp);
        
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    return 0 <= nrts <= t_ud /\ dist /\ b';  
  }
}.


(* - Weak, Single-function, Multi-target, Distinct-Tweak UnDetectability (W_SM_DT_UD) - *)
module type Oracle_WSMDTUD = {
  proc init(b_init : bool, g_init : pp_t -> tw_t -> in_t -> out_t, pp_init : pp_t) : unit
  proc query(tw : tw_t) : out_t
  proc get_tweaks() : tw_t list
  proc nr_targets() : int
  proc dist_tweaks() : bool
}.

module type Adv_WSMDTUD(O : Oracle_WSMDTUD) = {
  proc pick() : unit { O.query }
  proc distinguish(g : pp_t -> tw_t -> in_t -> out_t, pp : pp_t) : bool {}
}.


module O_WSMDTUD_Default : Oracle_WSMDTUD = {
  var b : bool
  var g : pp_t -> tw_t -> in_t -> out_t
  var pp : pp_t
  var ts : tw_t list
  
  proc init(b_init : bool, g_init : pp_t -> tw_t -> in_t -> out_t, pp_init : pp_t) : unit = {
    b <- b_init;
    g <- g_init;
    pp <- pp_init;
    ts <- [];
  }
  
  proc query(tw : tw_t) : out_t = {
    var x : in_t;
    var y : out_t;
    
    if (b) {
      y <$ dout;
    } else {
      x <$ din;
      y <- g pp tw x;
    }
    
    ts <- rcons ts tw;
    
    return y;
  }
  
  proc get_tweaks() : tw_t list = {
    return ts;
  }
  
  proc nr_targets() : int = {
    return size ts;
  }
  
  proc dist_tweaks() : bool = {
    return uniq ts;
  }
}.

module W_SM_DT_UD(A : Adv_WSMDTUD, O : Oracle_WSMDTUD) = {
  module A = A(O)
  
  proc main(b : bool, g : pp_t -> tw_t -> in_t -> out_t) : bool = {
    var pp : pp_t;
    var b' : bool;
    var nrts : int;
    var dist : bool;
    
    pp <$ dpp;
    O.init(b, g, pp);
    
    A.pick();
    b' <@ A.distinguish(g, pp);
        
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    return 0 <= nrts <= t_ud /\ dist /\ b';  
  }
}.


(* 
  - 
  Single-function, Multi-target, Distinct-Tweak Undetectability for
  members of a Collection (SM_DT_UD_C) 
  - 
*)
module type Adv_SMDTUDC(O : Oracle_SMDTUD, OC : Oracle_THFC) = {
  proc pick() : unit { O.query, OC.query }
  proc distinguish(pp : pp_t) :  bool {}
}.

module SM_DT_UD_C(A : Adv_SMDTUDC, O : Oracle_SMDTUD, OC : Oracle_THFC) = {
  module A = A(O, OC)
  
  proc main(b : bool) : bool = {
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var i : int;
    var b' : bool;
    var nrts : int;
    var dist : bool;
    var twsO, twsOC : tw_t list;
    
    pp <$ dpp;    
    OC.init(pp);
    O.init(b, pp);
    
    A.pick();
    b' <@ A.distinguish(pp);
        
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    twsO <@ O.get_tweaks();
    twsOC <@ OC.get_tweaks();
    
    return 0 <= nrts <= t_ud /\ dist /\ b' /\ disj_lists twsO twsOC;  
   }
}.


(* 
  - 
  Weak, Single-function, Multi-target, Distinct-Tweak Undetectability for
  members of a Collection (W_SM_DT_DSPR_C) 
  - 
*)
module type Adv_WSMDTUDC(O : Oracle_WSMDTUD, OC : Oracle_WTHFC) = {
  proc pick() : unit { O.query, OC.query }
  proc distinguish(gc : diff -> pp_t -> tw_t -> in_t -> out_t, df : diff, pp : pp_t) :  bool {}
}.

module W_SM_DT_UD_C(A : Adv_WSMDTUDC, O : Oracle_WSMDTUD, OC : Oracle_WTHFC) = {
  module A = A(O, OC)
  
  proc main(b : bool, gc : diff -> pp_t -> tw_t -> in_t -> out_t, df : diff) : bool = {
    var g : pp_t -> tw_t -> in_t -> out_t;
    var pp : pp_t;
    var tw : tw_t;
    var x : in_t;
    var i : int;
    var b' : bool;
    var nrts : int;
    var dist : bool;
    var twsO, twsOC : tw_t list;
    
    pp <$ dpp;
    
    OC.init(gc, pp);
    
    g <- gc df;
    O.init(b, g, pp);
    
    A.pick();
    b' <@ A.distinguish(gc, df, pp);
        
    nrts <@ O.nr_targets();
    dist <@ O.dist_tweaks();
    
    twsO <@ O.get_tweaks();
    twsOC <@ OC.get_tweaks();
    
    return 0 <= nrts <= t_ud /\ dist /\ b' /\ disj_lists twsO twsOC;  
   }
}.
